#!/bin/sh

# variables and functions designed to be overridden by the user
# -------------------------------------------------------------

# version of Scala to be used in compilation and in resolution of libraries
scala_version=2.12.12

# version of Java Virtual Machine to be used
sdkman_java_version="8.0.265.hs-adpt"

# Dependency list specification
# in format used by Coursier (group::artifact:version or group:artifact_scalaversion:version).
# Needs to output the list to the stdout, one line per dependency.
# Example:
#
# dependencies='
#     com.typesafe.play::play-json:2.8.2
#     org.tpolecat::doobie-core:0.9.0
# '
dependencies=

# List of custom artifact repository URLs, which are used in dependency resolution
# in addition to the well-known public maven repositories.
# Needs to output the list to the stdout, one line per repository URL
# (the values listed here are passed to `-r` option of Coursier),
# for more information see: https://get-coursier.io/docs/other-repositories
repositories=

# List of artifacts in explicitly stated versions that are to be used
# instead of the results of the automatic dependency resolution process.
# Commonly used when you depend on an older version of a library and the newer version is not backward compatible.
# Needs to output the list to the stdout, one line per artifact (in format group::artifact:version as
# the values are passed to the `--force-version` option of Coursier).
forced_versions=

# Name of the main class (script entrypoint).
# If not given it's assumed to be `package.name.used.in.the.first.package.statement.ScriptFileNameWithoutScalaExtension`
# (in other words, you can rely on the default if you name your main class the same as the script file and ensure it has `main` method)
main_class=

# By default (`false`) TSK will output a log of it's internal operations (to the standard error stream)
# only when a failure occur. This is to let you be able to pipe outputs of your script to other programs or files
# without any additional clutter.
# The TSK log is captured to a file in temporary directory and it's deleted right after display or when all goes well.
# Sometimes you'll want to see what happens in the real time though, especially when some of the operations take longer
# than expected, freeze or you want to see what happens exactly.
#
# valid values:
# - false - (default) output log to standard error on TSK failure, don't output anything if all goes well
# - true - output log to standard error in the real time
verbose=false

# variables and functions internal to tsk
# ---------------------------------------
tsk_log="${TMPDIR:-"/tmp"}/tsk-$$.log"

log() {
  >&2 echo "$@"
}

fatal() {
  log "FATAL ERROR: $*"
}

script_file="$([ $# -ne 0 ] && echo "${1}" || echo "${0}")"
(echo "${script_file}" | grep -q scala && [ -e "${script_file}" ] ) || (fatal \
  "tsk must be sourced either 1) from within a *.scala file or 2) with a *.scala file argument (~/.tsk/tsk-x.y.z Foo.scala)"; return 1)

get_abs_script_dir() {
  cd "${script_dir}" || (fatal "Can't cd to the script directory, symbolic links not supported (yet?)"; return 1)
  pwd -P
}

script_dir="$(dirname "$0")"
abs_script_dir="$(get_abs_script_dir)"
td=~/.tsk
bloop_cmd="${td}/bloop"
cs_cmd="${td}/cs"
java_bin_dir="${HOME}/.sdkman/candidates/java/${sdkman_java_version}/bin"
p_with_custom_java="${java_bin_dir}:${PATH}"
download_as=$( command -v wget > /dev/null && echo "wget -O" || echo "curl -fLo" )
module="$( basename "$0" | sed 's/\.scala//g' )"
os=$(uname)

# bloop and coursier internals
bloop_dir="${script_dir}/.bloop"
bloop_module_config="${bloop_dir}/${module}.json"
cs_fetch_result="${bloop_dir}/cs_fetch_result.json"

core_deps="
    org.scala-lang:scala-compiler:${scala_version}
    jline:jline:2.14.6
"

cs_fetch() {
  # shellcheck disable=SC2046
  # (the whole point is to make shell split the repositories and forced versions by words here)
  "$cs_cmd" fetch -q \
    --scala-version "${scala_version}" \
    $(for repo in ${repositories}; do echo "-r ${repo}"; done) \
    $(for ver in ${forced_versions}; do echo "--force-version ${ver}"; done) \
    "$@"
}

install_sdkman_and_java() {
  curl -s "https://get.sdkman.io?rcupdate=false" | bash
  bash -c ". ${HOME}/.sdkman/bin/sdkman-init.sh; sdk list java; sdk install java ${sdkman_java_version}"
}

install_coursier() {
  [ -e "$cs_cmd" ] && return 0;
  log "installing coursier"
  case "${os}" in
    "Linux")
      case "$(ldd /bin/sh | awk '/libc/ {print $1}' | sed 's/-.*//g')" in
        "libc.musl")
          # SDKMAN doesn't work on Alpine, need to either have java already
          # or to have root permissions
          if ! command -v java
          then
            if [ "$(whoami)" = "root" ]
            then
              apk update && apk add openjdk8-jre
            fi
          else
            fatal "No java present and no root user, which could install it"; return 1
          fi
          cs_url="https://git.io/coursier-cli";;
        "libc.so.6")
          install_sdkman_and_java
          cs_url="https://git.io/coursier-cli-linux";;
      esac;;
    "Darwin")
      install_sdkman_and_java
      cs_url=https://git.io/coursier-cli-macos;;
    *)
      log "Platform [${os}] is not officially supported (yet?)"
      install_sdkman_and_java
  esac
  ${download_as} "$cs_cmd" "$cs_url"
  chmod +x "$cs_cmd"
  if [ "${os}" = "Darwin" ]
  then
    (command -v xattr && xattr -d com.apple.quarantine "$cs_cmd") || true
  fi
}

coursier_cache_dir_on_Linux="${HOME}/.cache/coursier/v1"
coursier_cache_dir_on_Darwin="${HOME}/Library/Caches/Coursier/v1"
coursier_cache_dir="$( [ "${os}" = "Darwin" ] && echo "${coursier_cache_dir_on_Darwin}" || echo "${coursier_cache_dir_on_Linux}" )"

install_bloop() {
  [ -e "$bloop_cmd" ] && return 0;
  log "installing bloop"
  # Normally we should install the latest stable like below, but it seems to have troubles at the time of writing it
  # $cs_cmd bootstrap bloop --standalone -o "${bloop_cmd}"
  PATH=${p_with_custom_java} $cs_cmd bootstrap ch.epfl.scala:bloopgun_2.12:1.4.3-27-dfdc9971 --standalone -o "${bloop_cmd}"
}

build_inputs_sha() {
  (
    echo "${repositories}"
    echo "${dependencies}"
    echo "${forced_versions}"
    echo "${scala_version}"
    echo "${HOME}"
    echo "${abs_script_dir}"
  ) | sha256sum | tr -d ' -'
}

bloop_config_template() {
  cat << EOF
{
    "tsk_build_inputs_sha": "$(build_inputs_sha)",
    "version": "1.4.0",
    "project": {
        "name": "${module}",
        "directory": "${abs_script_dir}",
        "workspaceDir": "${abs_script_dir}",
        "sources": [
            "${abs_script_dir}"
        ],
        "dependencies": [
        ],
        "classpath": [
            $(cs_fetch --default ${dependencies} | sed 's/\(.*\)/"\1",/g')
            "${coursier_cache_dir}/https/repo1.maven.org/maven2/org/scala-lang/scala-library/${scala_version}/scala-library-${scala_version}.jar"
        ],
        "out": "${abs_script_dir}/.bloop/${module}",
        "classesDir": "${abs_script_dir}/.bloop/${module}/scala-2.12/classes",
        "resources": [],
        "scala": {
            "organization": "org.scala-lang",
            "name": "scala-compiler",
            "version": "${scala_version}",
            "options": [

            ],
            "jars": [
                "${coursier_cache_dir}/https/repo1.maven.org/maven2/org/scala-lang/scala-library/${scala_version}/scala-library-${scala_version}.jar",
                "${coursier_cache_dir}/https/repo1.maven.org/maven2/org/scala-lang/scala-compiler/${scala_version}/scala-compiler-${scala_version}.jar",
                "${coursier_cache_dir}/https/repo1.maven.org/maven2/jline/jline/2.14.6/jline-2.14.6.jar",
                "${coursier_cache_dir}/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_2.12/1.0.6/scala-xml_2.12-1.0.6.jar",
                "${coursier_cache_dir}/https/repo1.maven.org/maven2/org/scala-lang/scala-reflect/${scala_version}/scala-reflect-${scala_version}.jar"
            ],
            "analysis": "${abs_script_dir}/.bloop/${module}/inc_compile_2.12.zip",
            "setup": {
                "order": "mixed",
                "addLibraryToBootClasspath": true,
                "addCompilerToClasspath": false,
                "addExtraJarsToClasspath": false,
                "manageBootClasspath": true,
                "filterLibraryFromClasspath": true
            }
        },
        "java": {
            "options": [

            ]
        },
        "test": {
            "frameworks": [
                {
                    "names": [
                        "org.scalacheck.ScalaCheckFramework"
                    ]
                },
                {
                    "names": [
                        "org.specs2.runner.Specs2Framework",
                        "org.specs2.runner.SpecsFramework"
                    ]
                },
                {
                    "names": [
                        "org.specs.runner.SpecsFramework"
                    ]
                },
                {
                    "names": [
                        "org.scalatest.tools.Framework",
                        "org.scalatest.tools.ScalaTestFramework"
                    ]
                },
                {
                    "names": [
                        "com.novocode.junit.JUnitFramework"
                    ]
                }
            ],
            "options": {
                "excludes": [

                ],
                "arguments": [

                ]
            }
        },
        "resolution": {
            "modules": [ $(cat "${cs_fetch_result}" | cs_report_0_1_0_to_bloop_resolution_modules) ]
        },
        "tags": [
            "library"
        ]
    }
}
EOF
}

generate_bloop_config() {
  if grep -q "tsk_build_inputs_sha.*$(build_inputs_sha)" "${bloop_module_config}" 2>/dev/null
  then
    # good, config can stay
    true
  else
    log "generating bloop config"
    # shellcheck disable=SC2086
    # (all dependencies need to be passed space-separated so shell word splitting is fine here)
    cs_fetch --sources --javadoc --default ${core_deps} ${dependencies} --json-output-file "${cs_fetch_result}" > /dev/null
    bloop_config_template > "${bloop_module_config}"
    rm "${cs_fetch_result}"
  fi
}

cs_report_0_1_0_to_bloop_resolution_modules() {

  sed 's/"file":"/\nFILE /g
       s/"coord":"/\nCOORD /g
       s/"/\n/g' | \
    grep -e FILE -e COORD | \
    sed 's/FILE //g
         s/COORD //g' | \
    awk -F: '{
      group=$1
      artifact=$2
      version=$3

      getline
      path=$1
      gsub(/.jar$/, "", path)

      jar_path=(path ".jar")
      javadoc_path=(path "-javadoc.jar")
      sources_path=(path "-sources.jar")
      print(group, artifact, version, jar_path, javadoc_path, sources_path)
    }' | (
    after_first="false"
    while read -r group artifact version jar_path javadoc_path sources_path
    do
      [ "${after_first}" = "true" ] && echo ","
      cat << EOF
                {
                    "organization": "${group}",
                    "name": "${artifact}",
                    "version": "${version}",
                    "configurations": "default",
                    "artifacts": [
                        {
                            "name": "${artifact}",
                            "path": "${jar_path}"
                        },
                        {
                            "name": "${artifact}",
                            "classifier": "sources",
                            "path": "${sources_path}"
                        },
                        {
                            "name": "${artifact}",
                            "classifier": "javadoc",
                            "path": "${javadoc_path}"
                        }
                    ]
                }
EOF
    after_first="true"
    done
    )
}

prepare_for_running() {
  install_coursier          || (fatal "could not install Coursier"; return 1)
  install_bloop             || (fatal "could not install Bloop"; return 1)
  mkdir -p "${bloop_dir}"
  generate_bloop_config     || (fatal "could not generate Bloop configuration"; return 1)
  PATH=${p_with_custom_java} "${bloop_cmd}" compile \
    --config-dir "${script_dir}/.bloop" \
    "${module}" || (fatal "Error while compiling with Bloop"; return 1)
}

script_classpath() {
  echo "$(cs_fetch -p --default ${dependencies}):${bloop_dir}/${module}/bloop-bsp-clients-classes/classes-bloop-cli"
}

get_main_class() {
  if [ -z "${main_class}" ]
  then
    echo "$(awk '/^package/ { print $2 }' "${script_file}" | head -n 1).${module}"
  else
    echo "${main_class}"
  fi
}

exec_java() {
  exec java -cp "$(script_classpath)" "$(get_main_class)" "$@"
}

log_sink() {
  case "${verbose}" in
    "false")
      tee -a "${tsk_log}" > /dev/null;;
    "true")
      tee -a "${tsk_log}" /dev/stderr > /dev/null;;
    *)
      tee -a "${tsk_log}" /dev/stderr > /dev/null;;
  esac
}

run() {
  set -o pipefail
  if (prepare_for_running 2>&1 | log_sink)
  then
    rm "${tsk_log}"
    exec_java "$@"
  else
    [ "${verbose}" != "true" ] && cat "${tsk_log}" >&2
    rm "${tsk_log}"
    exec false
  fi
}
