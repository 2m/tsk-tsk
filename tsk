#!/bin/sh

# variables and functions designed to be overridden by the user
# -------------------------------------------------------------

# version of Scala to be used in compilation and in resolution of libraries
scala_version=2.12.12

# Dependency list specification
# in format used by Coursier (group::artifact:version or group:artifact_scalaversion:version).
# Needs to output the list to the stdout, one line per dependency.
# Example:
#
# dependencies() {
#   echo '
#     com.typesafe.play::play-json:2.8.2
#     org.tpolecat::doobie-core:0.9.0
#   '
# }
dependencies() { echo; }

# List of custom artifact repository URLs, which are used in dependency resolution
# in addition to the well-known public maven repositories.
# Needs to output the list to the stdout, one line per repository URL
# (the values listed here are passed to `-r` option of Coursier),
# for more information see: https://get-coursier.io/docs/other-repositories
repositories() { true; }

# List of artifacts in explicitly stated versions that are to be used
# instead of the results of the automatic dependency resolution process.
# Commonly used when you depend on an older version of a library and the newer version is not backward compatible.
# Needs to output the list to the stdout, one line per artifact (in format group::artifact:version as
# the values are passed to the `--force-version` option of Coursier).
forced_versions() { true; }

# variables and functions internal to tsk
# ---------------------------------------
script_dir="$(dirname "$0")"
abs_script_dir="$(readlink -f "$script_dir")"
td=~/.tsk
bloop_cmd="${td}/bloop"
cs_cmd="${td}/cs"
download_as=$( command -v wget > /dev/null && echo "wget -O" || echo "curl -fLo" )
module="$( basename "$0" | sed 's/\.scala//g' )"
scala_major_minor_ver="$(echo "${scala_version}" | sed 's/\([0-9].[0-9]\+\).*/\1/g')"

# bloop and coursier internals
bloop_dir="${script_dir}/.bloop"
bloop_module_config="${bloop_dir}/${module}.json"
cs_fetch_result="${bloop_dir}/cs_fetch_result.json"

core_deps() {
  echo "
    org.scala-lang:scala-compiler:${scala_version}
    jline:jline:2.14.6
  "
}

resolve_double_colons() {
  sed "s/\(.*\)::\(.*\):\(.*\)/\1:\2_${scala_major_minor_ver}:\3/g"
}

cs_fetch() {
  "$cs_cmd" fetch -q \
    --scala-version "${scala_version}" \
    $(repositories | each_to_opt "-r") \
    $(forced_versions | each_to_opt "--force-version") \
    "$@"
}

resolved_deps() {
  dependencies | resolve_double_colons
}

each_to_opt() {
  sed "s/\(.*\)/${1} \1/g"
}

install_coursier() {
  [ -e "$cs_cmd" ] && return 0;
  >&2 echo "installing coursier"
  platform="$(uname)_$(ldd /bin/sh | awk '/libc/ {print $1}' | sed 's/-.*//g')"
  case "${platform}" in
    "Linux_libc.musl")
      # the assumption: root on alpine in docker
      # may cause troubles down the road
      apk update && apk add openjdk11-jdk
      cs_url="https://git.io/coursier-cli";;
    "Linux_libc.so.6")
      cs_url="https://git.io/coursier-cli-linux";;
    # TODO test support for macOS
    *)
      >&2 echo "Platform [${platform}] may be not fully supported (yet?)"
      cs_url=https://git.io/coursier-cli-macos
  esac
  ${download_as} "$cs_cmd" "$cs_url"
  chmod +x "$cs_cmd"
  (command -v xattr && xattr -d com.apple.quarantine "$cs_cmd") || true
}

install_bloop() {
  [ -e "$bloop_cmd" ] && return 0;
  >&2 echo "installing bloop"
  $cs_cmd bootstrap bloop --standalone -o "${bloop_cmd}"
}

build_inputs_sha() {
  (
    repositories
    dependencies
    echo "${scala_version}"
    echo "${HOME}"
    echo "${abs_script_dir}"
  ) | sha256sum | tr -d ' -'
}

bloop_config_template() {
  cat << EOF
{
    "tsk_build_inputs_sha": "$(build_inputs_sha)",
    "version": "1.4.0",
    "project": {
        "name": "${module}",
        "directory": "${abs_script_dir}",
        "workspaceDir": "${abs_script_dir}",
        "sources": [
            "${abs_script_dir}"
        ],
        "dependencies": [
        ],
        "classpath": [
            $(cs_fetch --default $(resolved_deps) | sed 's/\(.*\)/"\1",/g')
            "${HOME}/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/${scala_version}/scala-library-${scala_version}.jar"
        ],
        "out": "${abs_script_dir}/.bloop/${module}",
        "classesDir": "${abs_script_dir}/.bloop/${module}/scala-2.12/classes",
        "resources": [],
        "scala": {
            "organization": "org.scala-lang",
            "name": "scala-compiler",
            "version": "${scala_version}",
            "options": [

            ],
            "jars": [
                "${HOME}/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/${scala_version}/scala-library-${scala_version}.jar",
                "${HOME}/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-compiler/${scala_version}/scala-compiler-${scala_version}.jar",
                "${HOME}/.cache/coursier/v1/https/repo1.maven.org/maven2/jline/jline/2.14.6/jline-2.14.6.jar",
                "${HOME}/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_2.12/1.0.6/scala-xml_2.12-1.0.6.jar",
                "${HOME}/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-reflect/${scala_version}/scala-reflect-${scala_version}.jar"
            ],
            "analysis": "${abs_script_dir}/.bloop/${module}/inc_compile_2.12.zip",
            "setup": {
                "order": "mixed",
                "addLibraryToBootClasspath": true,
                "addCompilerToClasspath": false,
                "addExtraJarsToClasspath": false,
                "manageBootClasspath": true,
                "filterLibraryFromClasspath": true
            }
        },
        "java": {
            "options": [

            ]
        },
        "test": {
            "frameworks": [
                {
                    "names": [
                        "org.scalacheck.ScalaCheckFramework"
                    ]
                },
                {
                    "names": [
                        "org.specs2.runner.Specs2Framework",
                        "org.specs2.runner.SpecsFramework"
                    ]
                },
                {
                    "names": [
                        "org.specs.runner.SpecsFramework"
                    ]
                },
                {
                    "names": [
                        "org.scalatest.tools.Framework",
                        "org.scalatest.tools.ScalaTestFramework"
                    ]
                },
                {
                    "names": [
                        "com.novocode.junit.JUnitFramework"
                    ]
                }
            ],
            "options": {
                "excludes": [

                ],
                "arguments": [

                ]
            }
        },
        "resolution": {
            "modules": [ $(cat "${cs_fetch_result}" | cs_report_0_1_0_to_bloop_resolution_modules) ]
        },
        "tags": [
            "library"
        ]
    }
}
EOF
}

generate_bloop_config() {
  if grep -q "tsk_build_inputs_sha.*$(build_inputs_sha)" "${bloop_module_config}" 2>/dev/null
  then
    # good, config can stay
    true
  else
    >&2 echo "generating bloop config"
    cs_fetch --sources --javadoc --default $(core_deps) $(resolved_deps) --json-output-file "${cs_fetch_result}" > /dev/null
    bloop_config_template > "${bloop_module_config}"
    rm "${cs_fetch_result}"
  fi
}

# TODO make this and unfreeze unnecessary by only using bloop for compilation
kill_build_server() {
  >&2 echo "killing build server"
  # TODO that'll work on Alpine only
  kill $( /usr/lib/jvm/java-11-openjdk/bin/jps | awk '/Server/ {print $1}' )
}

unfreeze_bloop() {
  timeout=1s
  ( "${bloop_cmd}" about & ( sleep 1; echo "timeout" ) ) | (
    head -n 1 | read status
    if [ "$status" = "timeout" ]
    then
      >&2 echo "no response from build server in ${timeout}"
      kill_build_server
    fi
  )
}

cs_report_0_1_0_to_bloop_resolution_modules() {

  sed 's/"file":"/\nFILE /g
       s/"coord":"/\nCOORD /g
       s/"/\n/g' | \
    grep -e FILE -e COORD | \
    sed 's/FILE //g
         s/COORD //g' | \
    awk -F: '{
      group=$1
      artifact=$2
      version=$3

      getline
      path=$1
      gsub(/.jar$/, "", path)

      jar_path=(path ".jar")
      javadoc_path=(path "-javadoc.jar")
      sources_path=(path "-sources.jar")
      print(group, artifact, version, jar_path, javadoc_path, sources_path)
    }' | (
    after_first="false"
    while read -r group artifact version jar_path javadoc_path sources_path
    do
      [ "${after_first}" = "true" ] && echo ","
      cat << EOF
                {
                    "organization": "${group}",
                    "name": "${artifact}",
                    "version": "${version}",
                    "configurations": "default",
                    "artifacts": [
                        {
                            "name": "${artifact}",
                            "path": "${jar_path}"
                        },
                        {
                            "name": "${artifact}",
                            "classifier": "sources",
                            "path": "${sources_path}"
                        },
                        {
                            "name": "${artifact}",
                            "classifier": "javadoc",
                            "path": "${javadoc_path}"
                        }
                    ]
                }
EOF
    after_first="true"
    done
    )
}

run() {
  install_coursier
  install_bloop
  mkdir -p "${bloop_dir}"
  generate_bloop_config
  unfreeze_bloop
  exec "${bloop_cmd}" run --config-dir "${script_dir}/.bloop" "${module}" -- "$@"
}
