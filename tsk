#!/bin/sh

# variables and functions designed to be overridden by the user
# -------------------------------------------------------------

# version of Scala to be used in compilation and in resolution of libraries
scala_version="${scala_version:-2.12.12}"

# Source files/directories
# if not set explicitly, it's being set to ${script_file} further down
# (by default only the main script belongs to the sources)
sources="${sources:-}"

# Dependency list specification
dependencies="${dependencies:-}"

# List of custom artifact repository URLs
repositories="${repositories:-}"

# List of artifacts in explicitly stated versions that are to be used
# instead of the results of the automatic dependency resolution process.
forced_versions="${forced_versions:-}"

# List of exclusions (Coursier's option: --exclude | -E  <organization:name>)
exclusions="${exclusions:-}"

# Name of the main class (script entrypoint).
# If not given it's assumed to be `package.name.used.in.the.first.package.statement.ScriptFileNameWithoutScalaExtension`
# (in other words, you can rely on the default if you name your main class the same as the script file and ensure it has `main` method)
main_class="${main_class:-}"

# By default (`false`) TSK will output a log of it's internal operations (to the standard error stream)
# only when a failure occur. This is to let you be able to pipe outputs of your script to other programs or files
# without any additional clutter.
# The TSK log is captured to a file in temporary directory and it's deleted right after display or when all goes well.
# Sometimes you'll want to see what happens in the real time though, especially when some of the operations take longer
# than expected, freeze or you want to see what happens exactly.
#
# valid values:
# - false - (default) output log to standard error on TSK failure, don't output anything if all goes well
# - true - output log to standard error in the real time
verbose="${verbose:-false}"

# version of Coursier, the workhorse for JVM and library fetching
coursier_version="${coursier_version:-v2.0.0-RC6-24}"

# version of Bloop, a fast and well-integrated Scala compilation tool
bloop_version="${bloop_version:-2.12:1.4.4-2-f9fd96b8}"

# variables and functions internal to tsk
# ---------------------------------------
tsk_log="${tsk_log:-${TMPDIR:-"/tmp"}/tsk-$$.log}"

log() {
  >&2 echo "$@"
}

fatal() {
  log "FATAL ERROR: $*"
}

extract_user_settings_part() {
  sed -n '/\/\*/,/\*\// p' | tail -n +2 | head -n -1 | grep -v -e '^. ' -e '^source '
}

# The alternative way of sourcing the TSK (~/.tsk/tsk-x.y.z Foo.scala)
# mainly serves debugging purposes as you are able to check output of the individual functions
script_file="$(echo "$0" | grep -q '\.sca\?l\?a\?$' && echo "${0}" || echo "${1}")"
[ -e "${script_file}" ] || (fatal \
  "tsk must be sourced either 1) from within a *.scala/*.sc file or 2) with a *.scala/*.sc file argument (~/.tsk/tsk-x.y.z Foo.scala)"; return 1)
if echo "$0" | grep -vq '\.sca\?l\?a\?$'
then
  tsk_user_settings="${TMPDIR:-"/tmp"}/tsk-$$.settings"
  extract_user_settings_part < "${script_file}" > "${tsk_user_settings}"
  # shellcheck disable=SC1090
  . "${tsk_user_settings}"
  rm "${tsk_user_settings}"
fi

sources="${sources:-${script_file}}"

get_abs_script_dir() {
  cd "${script_dir}" || (fatal "Can't cd to the script directory, symbolic links not supported (yet?)"; return 1)
  pwd -P
}

script_dir="$(dirname "${script_file}")"
abs_script_dir="$(get_abs_script_dir)"
abs_source_patterns() {
  echo "${sources}" | awk "BEGIN { RS=\"[ \\t\\n]+\" }
    /^.+\$/ { print \"${abs_script_dir}/\" \$1}"
}
get_abs_sources() {
  for source_entry in $(abs_source_patterns)
  do
    echo "${source_entry}"
  done | sort -u | grep -v '[^\]\*' | grep -v -F "${script_file}"
}
all_sources_json_array() {
  echo "[ $(get_abs_sources | sed 's/\(.*\)/"\1",/g')
          \"$(get_abs_script_dir)/$(basename "${script_file}")\" ]"
}
td=~/.tsk
# work around https://github.com/coursier/coursier/issues/1856
bloop_cmd="${td}/bloop-$(echo "${bloop_version}" | sed 's/:/_/g')"
cs_binary="${td}/cs-${coursier_version}"
cs_cmd="${cs_binary} ${COURSIER_OPTS:-}"
get_sha_sum() {
  if command -v sha256sum > /dev/null 2>&1
  then
    sha256sum
  else
    shasum -a 256
  fi
}
p_with_custom_java() {
  echo "$( ${cs_cmd} java-home --jvm 8 )/bin:${PATH}"
}
download_as=$( command -v wget > /dev/null && echo "wget -O" || echo "curl -fLo" )
module="$( basename "${script_file}" | sed 's/\.scala//g' )"
os=$(uname)

# bloop and coursier internals
bloop_dir="${script_dir}/.bloop"
bloop_module_config="${bloop_dir}/${module}.json"
cs_fetch_result="${bloop_dir}/${module}.cs_fetch.result"

scala_library="org.scala-lang:scala-library:${scala_version}"
core_deps="
    org.scala-lang:scala-compiler:${scala_version}
    ${scala_library}
    org.scala-lang:scala-reflect:${scala_version}

    jline:jline:2.14.6
"

cs_fetch() {
  # shellcheck disable=SC2046
  # (the whole point is to make shell split the repositories and forced versions by words here)
  ${cs_cmd} fetch -q \
    --scala-version "${scala_version}" \
    $(for repo in ${repositories}; do echo "-r ${repo}"; done) \
    $(for ver in ${forced_versions}; do echo "--force-version ${ver}"; done) \
    $(for org_artifact in ${exclusions}; do echo "--exclude ${org_artifact}"; done) \
    "$@"
}

install_coursier() {
  [ -e "$cs_binary" ] && return 0;
  log "installing coursier"
  cs_url_prefix="https://github.com/coursier/coursier/releases/download/${coursier_version}"
  case "${os}" in
    "Linux")
      case "$(ldd /bin/sh | awk '/libc/ {print $1}' | sed 's/-.*//g')" in
        "libc.musl")
          # Coursier isn't compiled against libc.musl yet (Alpine uses it), need to either have java already
          # or to have root permissions
          if ! command -v java
          then
            if [ "$(whoami)" = "root" ]
            then
              apk update && apk add openjdk8-jre
            else
              fatal "No java present and no root user, which could install it"; return 1
            fi
          fi
          cs_url="${cs_url_prefix}/coursier";;
        "libc.so.6")
          cs_url="${cs_url_prefix}/cs-x86_64-pc-linux";;
      esac;;
    "Darwin")
      cs_url="${cs_url_prefix}/cs-x86_64-apple-darwin";;
    *)
      log "Platform [${os}] is not officially supported (yet?)"
      cs_url="${cs_url_prefix}/coursier"
      command -v java || (fatal "Unknown system: ${os} and no java present. Please install java first"; return 1)
  esac
  ${download_as} "$cs_binary" "$cs_url"
  chmod +x "$cs_binary"
}

coursier_cache_dir_on_Linux="${HOME}/.cache/coursier/v1"
coursier_cache_dir_on_Darwin="${HOME}/Library/Caches/Coursier/v1"
coursier_cache_dir="$( [ "${os}" = "Darwin" ] && echo "${coursier_cache_dir_on_Darwin}" || echo "${coursier_cache_dir_on_Linux}" )"

install_bloop() {
  [ -e "${bloop_cmd}" ] && return 0;
  log "installing bloop"
  # Normally we should install the latest stable like below, but it seems to have troubles at the time of writing it
  # $cs_cmd bootstrap bloop --standalone -o "${bloop_cmd}"
  PATH="$(p_with_custom_java)" ${cs_cmd} bootstrap "ch.epfl.scala:bloopgun_${bloop_version}" --standalone -o "${bloop_cmd}"
}

build_inputs_sha() {
  (
    echo "${coursier_version}"
    echo "${bloop_version}"
    echo "${repositories}"
    echo "${sources}"
    echo "${dependencies}"
    echo "${forced_versions}"
    echo "${exclusions}"
    echo "${scala_version}"
    echo "${HOME}"
    echo "${abs_script_dir}"
  ) | get_sha_sum | tr -d ' -'
}

bloop_config_template() {
  cat << EOF
{
    "tsk_build_inputs_sha": "$(build_inputs_sha)",
    "version": "1.4.0",
    "project": {
        "name": "${module}",
        "directory": "${abs_script_dir}",
        "workspaceDir": "${abs_script_dir}",
        "sources": $(all_sources_json_array),
        "dependencies": [
        ],
        "classpath": [
            $(cs_fetch --default ${dependencies} | sed 's/\(.*\)/"\1",/g')
            "${coursier_cache_dir}/https/repo1.maven.org/maven2/org/scala-lang/scala-library/${scala_version}/scala-library-${scala_version}.jar"
        ],
        "out": "${abs_script_dir}/.bloop/${module}",
        "classesDir": "${abs_script_dir}/.bloop/${module}/scala-2.12/classes",
        "resources": [],
        "scala": {
            "organization": "org.scala-lang",
            "name": "scala-compiler",
            "version": "${scala_version}",
            "options": [

            ],
            "jars": [
                "${coursier_cache_dir}/https/repo1.maven.org/maven2/org/scala-lang/scala-library/${scala_version}/scala-library-${scala_version}.jar",
                "${coursier_cache_dir}/https/repo1.maven.org/maven2/org/scala-lang/scala-compiler/${scala_version}/scala-compiler-${scala_version}.jar",
                "${coursier_cache_dir}/https/repo1.maven.org/maven2/jline/jline/2.14.6/jline-2.14.6.jar",
                "${coursier_cache_dir}/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_2.12/1.0.6/scala-xml_2.12-1.0.6.jar",
                "${coursier_cache_dir}/https/repo1.maven.org/maven2/org/scala-lang/scala-reflect/${scala_version}/scala-reflect-${scala_version}.jar"
            ],
            "analysis": "${abs_script_dir}/.bloop/${module}/inc_compile_2.12.zip",
            "setup": {
                "order": "mixed",
                "addLibraryToBootClasspath": true,
                "addCompilerToClasspath": false,
                "addExtraJarsToClasspath": false,
                "manageBootClasspath": true,
                "filterLibraryFromClasspath": true
            }
        },
        "java": {
            "options": [

            ]
        },
        "test": {
            "frameworks": [ ],
            "options": {
                "excludes": [ ],
                "arguments": [ ]
            }
        },
        "resolution": {
            "modules": [ $(cat "${cs_fetch_result}" | cs_report_0_1_0_to_bloop_resolution_modules) ]
        },
        "tags": [
            "library"
        ]
    }
}
EOF
}

fetch_all_dependencies() {
    log "fetching all dependencies"
    # shellcheck disable=SC2086
    # (all dependencies need to be passed space-separated so shell word splitting is fine here)
    cs_fetch --sources --javadoc --default ${core_deps} ${dependencies} --json-output-file "${cs_fetch_result}" > /dev/null
}

generate_bloop_config() {
  if grep -q "tsk_build_inputs_sha.*$(build_inputs_sha)" "${bloop_module_config}" 2>/dev/null
  then
    # good, config can stay
    true
  else
    fetch_all_dependencies
    log "generating bloop config"
    bloop_config_template > "${bloop_module_config}"
  fi
}

unjsonize_cs_report() {
  sed 's/"file":"\?/\nFILE /g
       s/"coord":"/\nCOORD /g
       s/,/\n/g
       s/"/\n/g'
}

just_file_and_coords() {
  grep -e FILE -e COORD
}

strip_file_and_coords_markers() {
    sed 's/FILE //g
         s/COORD //g'
}

artifact_info_as_tsv() {
  awk -F: '{
    group=$1
    artifact=$2
    version=$3

    getline
    path=$1

    if (path != "null") {
      gsub(/.jar$/, "", path)

      jar_path=(path ".jar")
      javadoc_path=(path "-javadoc.jar")
      sources_path=(path "-sources.jar")
      print(group, artifact, version, jar_path, javadoc_path, sources_path)
    }
  }'
}

cs_report_0_1_0_to_bloop_resolution_modules() {
  unjsonize_cs_report | \
    just_file_and_coords | \
    strip_file_and_coords_markers | \
    artifact_info_as_tsv | (
    after_first="false"
    while read -r group artifact version jar_path javadoc_path sources_path
    do
      [ "${after_first}" = "true" ] && echo ","
      cat << EOF
                {
                    "organization": "${group}",
                    "name": "${artifact}",
                    "version": "${version}",
                    "configurations": "default",
                    "artifacts": [
                        {
                            "name": "${artifact}",
                            "path": "${jar_path}"
                        },
                        {
                            "name": "${artifact}",
                            "classifier": "sources",
                            "path": "${sources_path}"
                        },
                        {
                            "name": "${artifact}",
                            "classifier": "javadoc",
                            "path": "${javadoc_path}"
                        }
                    ]
                }
EOF
    after_first="true"
    done
    )
}

prepare_for_running_with_bloop() {
  install_coursier          || (fatal "could not install Coursier"; return 1)
  install_bloop             || (fatal "could not install Bloop"; return 1)
  mkdir -p "${bloop_dir}"
  generate_bloop_config     || (fatal "could not generate Bloop configuration"; return 1)
  PATH="$(p_with_custom_java)" "${bloop_cmd}" compile \
    --config-dir "${script_dir}/.bloop" \
    "${module}" || (fatal "Error while compiling with Bloop"; return 1)
}

script_classpath() {
  echo "$(cs_fetch --default "${scala_library}" ${dependencies} | sort -ds | awk '{printf("%s:", $0)}'
         )${bloop_dir}/${module}/bloop-bsp-clients-classes/classes-bloop-cli"
}

get_main_class() {
  if [ -z "${main_class}" ]
  then
    echo "$(awk '/^package/ { print $2 "." }' "${script_file}" | head -n 1)${module}"
  else
    echo "${main_class}"
  fi
}

exec_java() {
  # shellcheck disable=SC2086
  # JAVA_OPTS can be multiple -D things, we want to pass all separately
  PATH="$(p_with_custom_java)" exec java -cp "$(script_classpath)" ${JAVA_OPTS:-} "$(get_main_class)" "$@"
}

exec_ammonite() {
  PATH="$(p_with_custom_java)" exec ${cs_cmd} launch ammonite -- "${script_file}" "$@"
}

log_sink() {
  case "${verbose}" in
    "false")
      tee -a "${tsk_log}" > /dev/null;;
    "true")
      tee -a "${tsk_log}" /dev/stderr > /dev/null;;
    *)
      tee -a "${tsk_log}" /dev/stderr > /dev/null;;
  esac
}

run() {
  set -o pipefail
  if (prepare_for_running_with_bloop 2>&1 | log_sink)
  then
    rm "${tsk_log}"
    eval "$(printf "%s" "exec_java $(
      seq "${argc}" | awk '{printf "\"$arg_" $1 "\" "}'
    )")"
  else
    [ "${verbose}" != "true" ] && cat "${tsk_log}" >&2
    rm "${tsk_log}"
    exec false
  fi
}

run_with_ammonite() {
  set -o pipefail
  if (install_coursier 2>&1 | log_sink)
  then
    rm "${tsk_log}"
    eval "$(printf "%s" "exec_ammonite $(
      seq "${argc}" | awk '{printf "\"$arg_" $1 "\" "}'
    )")"
  else
    [ "${verbose}" != "true" ] && cat "${tsk_log}" >&2
    rm "${tsk_log}"
    exec false
  fi
}

# Working around ash (Alpine) lack of arrays, to let use simply write `run`
# capturing the parameters in order to use it in exec_java
i=1
argc="$#"
# arg is used within eval
# shellcheck disable=SC2034
for arg in "$@"
do
  eval "arg_$i=\"\${arg}\""
  i=$(( i + 1 ))
done
unset i
